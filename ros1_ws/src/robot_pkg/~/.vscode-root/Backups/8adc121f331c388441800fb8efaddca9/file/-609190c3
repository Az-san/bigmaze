file:///root/ros1_ws/src/robot_pkg/script/import/common_import.py {"mtime":1726812998000,"ctime":1729762978836,"size":1769,"etag":"3d31snp531q2","orphaned":false,"typeId":""}
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#==================================================

## @file libmap
## @author Kentaro NAKAMURA
## @modified for PyQt5 by Takumi FUJI
## @modified for hidapi by Maiko Kudo
## @brief インポート

#==================================================

#==================================================

# Python関係

#==================================================
import rospy
import cv2
import numpy as np
import math
import random
import time
from time import sleep
import hid  # hidapiを使ったジョイスティックサポート
import os
from datetime import datetime
import pickle
from subprocess import Popen
from PyQt5 import QtGui, QtCore, QtWidgets

#==================================================

# ROS関係

#==================================================
import tf
import actionlib
from cv_bridge import CvBridge, CvBridgeError
from nav_msgs.msg import *
from geometry_msgs.msg import *
from sensor_msgs.msg import LaserScan
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from std_msgs.msg import Int16, String
from sensor_msgs.msg import Image
from gazebo_msgs.msg import *
from actionlib_msgs.msg import *
import rosnode
from std_srvs.srv import Empty
from srv_pkg.srv import SlamCmd

#==================================================

# パラメータ

#==================================================
GOAL_POINT_METER = [5.3, 0.0, 0.0]
GOAL_ITERATION_NUM = 30             # ゴールする回数
TRIAL_ITERATION_NUM = 30            # トライアルの制限回数

#==================================================
# ジョイスティックの初期化関数
#==================================================
class JoystickHandler:
    def __init__(self):
        self.device = None
        try:
            # Logitech RumblePad 2のVIDとPIDに合わせてデバイスを初期化
            self.device = hid.device()
            self.device.open(0x046d, 0xc218)  # デバイスのVIDとPIDに基づく設定
            self.device.set_nonblocking(True)
            print("Joystickの名称: Logitech RumblePad 2 USB")
        except IOError:
            print("Joystickが見つかりませんでした。")

    def get_input(self):
        try:
            data = self.device.read(64)
            if data:
                x_axis = data[0]  # HIDデータのインデックスをデバイス仕様に合わせて調整
                y_axis = data[1]
                if y_axis == 1:
                    return [1, 0, 0, 0]  # 前進
                elif y_axis == -1:
                    return [0, 1, 0, 0]  # 後退
                elif x_axis == 1:
                    return [0, 0, 1, 0]  # 右
                elif x_axis == -1:
                    return [0, 0, 0, 1]  # 左
        except Exception as e:
            print(f"ジョイスティック入力エラー: {e}")
        return None

#==================================================
# その他のプログラムロジックの追加部分
#==================================================
class RobotController:
    def __init__(self):
        rospy.init_node("robot_controller")
        self.joystick = JoystickHandler()
        # ROS関連のパブリッシャーとサブスクライバーのセットアップ
        self.pub_state = rospy.Publisher("robot_state", String, queue_size=1)
        # 必要なROSトピックやアクションサーバーのセットアップ...

    def process_input(self):
        result = self.joystick.get_input()
        if result:
            # 入力データに基づいてロボットの動作を定義
            if result == [1, 0, 0, 0]:
                print("ロボット前進")
            elif result == [0, 1, 0, 0]:
                print("ロボット後退")
            elif result == [0, 0, 1, 0]:
                print("ロボット右旋回")
            elif result == [0, 0, 0, 1]:
                print("ロボット左旋回")
            # 必要なROSメッセージを送信...

#==================================================
# メイン処理
#==================================================
if __name__ == "__main__":
    controller = RobotController()
    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        controller.process_input()
        rate.sleep()
